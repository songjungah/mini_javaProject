- 한명은 지금 따라하면서 이번 미니프로젝트의 프로젝트 사용
- 한명이 git 관리

[1] JAVA 프로젝트 생성
	1. NEW PROJECT
	2. NAME : [프로젝트명], kor2024_javaProject
		- 주로 웹사이트명으로 프로젝트명 사용
		- create git repository 체크안함
	3. build system : inellij
	4. jdk : 17
	* add sample code 체크 안함
	[create]

[2] 간단한 프로젝트에 필요한 라이브러리와 패키지 구성
	1. 라이브러리  : JDBC 라이브러리
	: mysql-connector-j-9.1.0.jar
	: 오른쪽 클릭 -> add library -> OK

	2. MVC 패턴에 따른 패키지(폴더) 구성
	- etc 패키지 : 코드와 자료들, 메모장, 규칙, 라이브러리
	: SQL 파일.sq / JDBC 라이브러리 / 협업에 필요한 공지사항 메모

	- controller 패키지

	- model 패키지
	: dao 패키지 / dto 패키지

	- view 패키지

	- AppStart class

[3] GIT 리포지토리에 프로젝트를 등록
- 주의할점 : 빈 패키지/폴더는 push 불가능, 임의의 클래스/파일을 1개 이상 미리 생성하기
	1. 팀원중에 한사람이 대표로 프로젝트를 본인 git 리포지토리에 공유
	[VCS] -> [share project on git]

	2. repository name : 프로젝트명
	   remote : origin
	   private : 체크안함(public)
	   description : 프로젝트의 간단한 설명 ex) 미니 자바 프로젝트 저장소
	   [share]

	------> 다양한 오류가 발생할 수 있기때문에 구글링, 팀안에서 해결, 강사에게 질문

	3. 최초 업로드 (웬만하면 모든 파일 체크해서) add

	4. git 리포지토리 프로젝트가 정상적으로 최초 업로드가 성공하면 완료

[4] 팀원들을 초대하는 방법(git 리포지토리 주인장)
	1. 해당하는 프로젝트가 위치한 웹에서 git 리포지토리 접속
	2. 상단메뉴 [setting] 클릭
	3. 설정 왼쪽메뉴 -> [Collaborators] 클릭 -> [Add People] 클릭
	4. git 이름 또는 이메일로 초대
	- 강사님 : kgs2072@naver.com

	[초대받은사람입장]
	1. 초대를 보내왔는지 확인
		1-1) 이메일 확인
		1-2) 프로필옆에 알림창 확인
	2. [Accep invitation] 클릭

[5] 브랜치 생성, gitHub 에는 브랜치라는 기능을 제공한다
- github 에는 브랜치라는 기능이 포함

* 목적
   1. 협업시 각 브랜치는 각 사람들의 코드 구분
   2. 버전관리, 테스트용 코드 VS 배포용 코드 VS 임시코드

* 정의 : 코드를 저장하는 저장소를 각 브랜치마다 서로 다른 저장상태 관리를 할 수 있도록 지원하는 기능
   - 기본값은 브랜치는 master
   - master 브랜치를 이용한 여러사람이 동일한 저장소를 사용하면 버전관리 힘들다(충돌)

* 협업에서 브랜치 활용
   1. master 브랜치는 취합(여러사람의 코드를 합친결과 - 최신코드) 코드
   2. 각 팀원들 마다 각 브랜치를 만들어서 작업하기
	팀원 : '유재석', '강호동', '신동엽'
	브랜치수 : master브랜치, '유재석'브랜치, '강호동'브랜치, '신동엽'브랜치
   3. 각 팀원들은 브랜치 만들기
   1) 주인 : 프로젝트내 상단 [master] 클릭 -> new branch -> 브랜치명 : 본인이름(영문이 좋음)
	* 브랜치를 생성하고 최초 push를 하면 코드와 브랜치 상태도 같이 push가 됨(브랜치 생성후 최초 push 한번은 필수!)

   2) 초대받은 사람
    - 인텔리제이 최초화면 -> Get from VCS 클릭
    - 왼쪽메뉴 [github] --> 리포지토리 명 검색 후 원하는 리포지토리 선택 --> [clone]
    - [Trust Project] 클릭하기
    - 프로젝트 내 상단에 [main/master] 가 있으면 new branch 를 생성하고 코드 치기
    * 주의할 점 : 바로 코드치지 않고 본인 브랜치 작성해야함

[6] 각 브랜치들이 코드를 작성하고 [master/main] 가 각 브랜치들을 취함(코드를 합치는)하는 작업
   1. 프로젝트에서 코드 작성시 본인 브랜치에서만 작성한다.
	1-1) 브랜치 업데이트를 한 뒤에 진행한다.
   2. 각 브랜치를 시간간격을 두고 pull을 받는다.
	2-1) 한사람꺼 pull을 한번 하고 push 한번 하는걸 권장
   3. 충돌 시 merge(겹치는 코드 합치기)
   4. 버전을 맞춰가면서 릴레이처럼 진행한다.

